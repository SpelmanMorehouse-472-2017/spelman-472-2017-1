Tracking and Testing Plan

2.
  A. Define your artifacts?
  
  Our artifacts will be defined based on the project requirements. Initially, artifacts will represent the primary functional requirements and the primary technical requirements for our project. Once the primary artifacts are completed, the next set of artifacts will consist of the secondary functional and technical requirements.
  
  B. Transparently record progress? (i.e. at any point in time, I or any of your teammates should be able to see how far along you are on each artifact.)
  
  The progress of completion for each artifact shall be updated each time a team member contributes to an artifact. Each artifact will encompass their own set of tasks. The number of completed tasks shall represent the overrall completetion percentage of that artifact. Thus, project progress will be transparent to the team members.
  
  C. Determine when something is done?
  
 We will determine that something is done when it is functional and there is a product that is releasable. The person performing the work and the person accepting the work have this common definition of done.
 
  D. Decide what each person is working on?
  
Based on the roles within the team, team members will take on tasks during each sprint that are related to their role. The scrum master will get an assessment of the skill set of each team member and make sure that tasks are assigned accordingly.

  E. How will you make sure everyone understands what everyone else is doing enough to jump in and help if necessary?
  
In order to keep all team members aware of all aspects of project development we will hold daily standup where we will discuss progress made on each task and what we plan to do in order to move forward on that task. We will also rotate coding responsibility so that everyone is familiar with the code base and will easily be able to jump in, in the event that another team member is blocked. We will also write very readable code and have commenting throughout that will help others understand the code base.

  F. How and how often will you evaluate your progress and reassess your plan?
  
  During ouwr weekly meetings, our process will be ealuted and plan will be reassses based on the needs of the user for the app engine. Our progress is tested by the success of our individual and integrated testing.
 
3.
  Determine a test plan.
 A. It's not usually the role of a test plan to discuss unit testing, but you do need to determine and provide your process for handling unit tests.  Who will be responsible for verifying that all code is unit tested?  How often will the unit tests be verified?
 
 To verify that the test are producing the correct results, or that the final state is correct, is state based unit testing.
 We will be be performing state based unit testing especially when integrating the tests. As a team we will all write an equal amount of test so that the different types of test are unique. These will be test will be tested individually with edge cases for correctness. Once some of the test are integrated, they will be tested more frequently because the integrated test are more prone to error and failure due to the fact that the integration test have to work together in a real life environment. As a whole we will ensure that each test is readable, easy to write (since there will be many), fast and reliable.
 B. How will integration points be tested?  How will you make sure the java code can talk to the database?  How will you make sure the client can talk to the java code?
 
 Integration testing is integral to our plan. Integration testing usually involves writing a reasonable size of code to test functions that may be integrated. Once all of our indiviudal units have be created, they will then be tested with junit tests. Each unit test one by one, will be combined so that that the we can see how all the units behave together. Combining  all the unit test in the final stage will permit us to test the interfaces also. A top down or bottom up approach is likely to happen. The client can talk to the java code by the data the client enters in the UI. This data will get converted into an XML formats. The SQL will be taken from the resulting XML file and then queried into the database.
 
 
 C. What functionality of the service as a whole will you verify?  How will you verify it?  Who will do the verification?  How often?

